"""
Что должен понимать разработчик(junior):
1. Понимать что такое async def, await, asyncio.run()
2. Уметь запускать корутину(coroutine) с помощью asyncio.run()
3. Осознавать, что await приостанавливает выполнение до завершения задачи
"""

import asyncio  # Импортируем модуль asyncio


async def say_hello(t_e):  # async def определяет корутину
    await asyncio.sleep(
        t_e
    )  # await - это ключевое слово,
    # которое говорит Python: "Останови выполнение текущей корутины,
    # пока не получишь результат от другой".
    # asyncio.sleep() — это асинхронная операция.
    # await asyncio.sleep() — это "асинхронная пауза", освобождающая event loop.
    print(f"Hello world in {t_e} seconds")  # выводим результат


if (
    __name__ == "__main__"
):  # это хороший стиль, позволяет использовать модуль как импортируемый

    time_sleep = int(input("Enter the number of seconds in standby mode: "))  # переменная для динамического указания секунд сна
    asyncio.run(say_hello(time_sleep))  # Создаёт цикл событий(event loop), запускает корутину, закрывает цикл по завершении



"""
Корутина — это специальная функция, которую можно приостанавливать и возобновлять, обычно с помощью await. 
Coroutine = "совместно выполняемая рутина" (co = совместно, routine = подпрограмма)
async def создаёт корутину.
Когда ты вызываешь эту функцию — она не выполняется сразу, а возвращает объект корутины (coroutine object).
Чтобы она начала выполняться, её нужно "ожидать" — через await или запустить через asyncio.run().
"""

async def greet(name):
    print(f"Привет {name}")

coro = greet("Moby Dick")   # Это не вызов функции как обычно!
print(coro)      # <coroutine object greet at 0x...>

asyncio.run(greet("Tim"))  # Вернёт: Привет Tim

async def main(name):   # создаём обёртку, над корутиной, что бы она выполнилась.
    # Этот подход через main() очень полезен, когда нужно await-ить несколько корутин
    coro = greet(name)  # создаём объект-корутину
    await coro      # здесь она действительно выполняется

asyncio.run(main("Jack"))  # Вернёт: Привет Jack



"""
Вопрос_1:
Что произойдёт, если вызвать функцию, определённую с async def, как обычную — без await или asyncio.run()?

(Например: greet("Tim") — если greet это async def greet(name): ...)
Что вернётся и будет ли выполняться тело функции?

Ответ:
Junior: 
Эта функция вернёт объект корутиын(coroutine object) сама функция не выполнится!

Middle:
async def создаёт корутину, а при вызове такой функции, например greet("Tim"), ты получаешь coroutine object.
Тело функции не выполняется до тех пор, пока ты не сделаешь await greet("Tim") или asyncio.run(greet("Tim")).

Вопрос_2:
Что делает ключевое слово await, и почему его нельзя использовать вне async def?

Ответ:
await говорит Python'у:
«Останови выполнение текущей корутины, пока не получишь результат от другой (асинхронной) операции».
И да, await работает только внутри функций, определённых с async def.
Если использовать await вне асинхронной функции — Python выдаст ошибку:
SyntaxError: 'await' outside function

Вопрос_3:
Что делает функция asyncio.run() и в чём её основная роль при работе с корутинами?

Ответ:
Создаёт event loop (если его ещё нет),
Запускает корутину (то есть начинает её выполнение),
Дожидается результата,
Закрывает цикл событий после завершения.

Вопрос_4:
Что делает await asyncio.sleep(3) — пошагово?
(Опиши не только задержку, но и что происходит внутри event loop.)

Ответ_4:
await приостанавливает выполнение текущей корутины.
Управление передаётся обратно в event loop, который может заняться другими задачами.
asyncio.sleep(3) — это асинхронная задержка, она не блокирует выполнение программы.
Через 3 секунды event loop возобновляет выполнение корутины с того места, где она была приостановлена.

Важно: asyncio.sleep() — это просто способ "освободить event loop", он не замораживает поток, как time.sleep().

Вопрос_5:
Что такое корутина в Python?
Когда она выполняется, и что происходит при её вызове?

Ответ:
Корутина — это функция, определённая с помощью async def.
Она возвращает coroutine object, который можно приостановить и возобновить с помощью await.
Корутина выполняется в event loop'е
Вызов без event loop'а возвращается объект корутины и вы получаете предупреждение (RuntimeWarning)


корутина - это асинхронная функция, которую можно приостановить и возобновить. 
Создать корутину можно с помощью зарезервированных слов async def. 
Она выполняется в цикле событий. 
При вызове в цикле событий, она выполнит логику которая в неё заложена, 
если вызвать вне цикла событий, то вернёт объект корутины
"""

